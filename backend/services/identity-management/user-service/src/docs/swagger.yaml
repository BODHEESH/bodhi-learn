# \d\DREAM\bodhi-learn\backend\services\identity-management\user-service\src\docs\swagger.yaml


openapi: 3.0.0
info:
  title: User Service API
  description: API documentation for the User Service of Bodhi Learn platform
  version: 1.0.0
  contact:
    name: Bodhi Learn Support
    email: support@bodhilearn.com

servers:
  - url: http://localhost:3000/api
    description: Development server
  - url: https://api.staging.bodhilearn.com/users
    description: Staging server
  - url: https://api.bodhilearn.com/users
    description: Production server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        firstName:
          type: string
        lastName:
          type: string
        status:
          type: string
          enum: [active, inactive, suspended, pending]
        institutionId:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Profile:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        avatarUrl:
          type: string
        phoneNumber:
          type: string
        dateOfBirth:
          type: string
          format: date
        gender:
          type: string
          enum: [male, female, other, prefer_not_to_say]
        address:
          type: object
        preferences:
          type: object
        metadata:
          type: object

    Role:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        displayName:
          type: string
        description:
          type: string
        permissions:
          type: array
          items:
            type: string
        level:
          type: integer
        metadata:
          type: object

    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
        details:
          type: object

paths:
  /users:
    get:
      summary: List users
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
        - in: query
          name: search
          schema:
            type: string
        - in: query
          name: status
          schema:
            type: string
            enum: [active, inactive, suspended, pending]
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  pagination:
                    type: object
                    properties:
                      total:
                        type: integer
                      page:
                        type: integer
                      limit:
                        type: integer
        '401':
          description: Unauthorized
        '403':
          description: Forbidden

    post:
      summary: Create user
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - firstName
                - lastName
                - institutionId
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 8
                firstName:
                  type: string
                lastName:
                  type: string
                institutionId:
                  type: string
                  format: uuid
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input
        '401':
          description: Unauthorized
        '403':
          description: Forbidden

  /users/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
          format: uuid
    
    get:
      summary: Get user details
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found

    put:
      summary: Update user
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                status:
                  type: string
                  enum: [active, inactive, suspended, pending]
      responses:
        '200':
          description: User updated
        '400':
          description: Invalid input
        '404':
          description: User not found

    delete:
      summary: Delete user
      security:
        - bearerAuth: []
      responses:
        '204':
          description: User deleted
        '404':
          description: User not found

  /profiles/{userId}:
    parameters:
      - in: path
        name: userId
        required: true
        schema:
          type: string
          format: uuid

    get:
      summary: Get user profile
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        '404':
          description: Profile not found

    put:
      summary: Update profile
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Profile'
      responses:
        '200':
          description: Profile updated
        '400':
          description: Invalid input
        '404':
          description: Profile not found

  /roles:
    get:
      summary: List roles
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of roles
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Role'

    post:
      summary: Create role
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - displayName
              properties:
                name:
                  type: string
                displayName:
                  type: string
                description:
                  type: string
                permissions:
                  type: array
                  items:
                    type: string
                level:
                  type: integer
      responses:
        '201':
          description: Role created
        '400':
          description: Invalid input

  /roles/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
          format: uuid

    get:
      summary: Get role details
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Role details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        '404':
          description: Role not found

    put:
      summary: Update role
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Role'
      responses:
        '200':
          description: Role updated
        '400':
          description: Invalid input
        '404':
          description: Role not found

    delete:
      summary: Delete role
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Role deleted
        '404':
          description: Role not found
